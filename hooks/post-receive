#!/bin/bash -
#
# Git Post-Receive Hook
#
# Take the received commit, which is expected to be in the Zim
# format, and use Zim to convert it into various other formats
# that we want to publish.
#
# This script understands the following `--push-option`s:
#
#     * `debug` - Turns on debugging output from Zim.
#
# See: https://git-scm.com/docs/githooks#post-receive
#

# Constants.
ZIM_CMD="$(which zim)"
readonly ZIM_CMD="${ZIM_CMD:-/usr/bin/zim}"
readonly REPO_DIR="$(basename $(realpath "${GIT_DIR:-$PWD}"))"
readonly TMP_DIR="$(realpath "${GIT_DIR:-$PWD}/tmp-$$")"
readonly BUILD_DIR="$(realpath "${GIT_DIR:-$PWD}/build-$$")"
RUBY_CMD="$(which ruby)"
readonly RUBY_CMD="${RUBY_CMD:-$HOME/bin/ruby}"

# Read `--push-option`s from the client.
# Set variables if used by an older Git.
if [ -z "$GIT_PUSH_OPTION_COUNT" ]; then
    readonly GIT_PUSH_OPTION_COUNT=0
fi
if [ 0 -lt "$GIT_PUSH_OPTION_COUNT" ]; then
    for i in $(seq 0 "$GIT_PUSH_OPTION_COUNT"); do
        opt_var="GIT_PUSH_OPTION_${i}"
        if [ "debug" = "${!opt_var}" ]; then
            readonly DEBUG=1
        else
            readonly DEBUG=0
        fi
    done
fi

#
# Function: gitfeedScript
#
# Param: $1 Path to $GIT_DIR
# Param: $2 Title of the feed.
# Param: $3 URL of the feed.
# Param: $4 Description of the feed.
#
gitfeedScript () {
    cat <<EOF
require 'rubygems'
require 'gitfeed'

gf = Gitfeed.new(
  '${1:-.}',
  {
    :title => '${2:-$REPO_DIR}',
    :url => '${3:-/latest_changes}',
    :description => '${4:-$REPO_DIR}'
  }
)
puts gf.feed
EOF
}

#
# Function: main
#
# Param: $1 Old revision.
# Param: $2 New revision.
# Param: $3 Full name of updated ref (like "refs/heads/master").
#
main () {
    local oldrev="$1"
    local newrev="$2"
    local ref="$3"

    local the_ref=$(echo -n "$ref" | cut -d '/' -f 3)
    echo "Received a commit to '$the_ref'."

    # If the ref we're working with has a `markdown-` prefix, then we
    # don't actually want to do anything.
    echo -n "$ref" | grep -q "markdown-"
    if [ $? -eq 0 ]; then
        return # We're done!
    fi

    # Look for the presence of a notebook.zim file.
    git cat-file -e "$ref":notebook.zim 2>/dev/null
    if [ $? -eq 1 ]; then
        return # We have nothing to do!
    fi

    # Checkout a new copy of the repository.
    git clone -b "$the_ref" "$GIT_DIR" "$TMP_DIR"
    # Export from Zim Wiki format to Markdown.
    "$ZIM_CMD" --export --format markdown --output "$BUILD_DIR" "$TMP_DIR"

    # See if we have a markdown branch.
    cd "$TMP_DIR"
    OLD_GIT_DIR="$GIT_DIR"
    GIT_DIR=".git"
    git branch -a | grep -q "markdown-$the_ref"
    # Make it if we don't.
    if [ $? -gt 0 ]; then
        git checkout -b markdown-"$the_ref" origin/"$the_ref"
        git rm -rf "$TMP_DIR"/*
    else
        git checkout markdown-"$the_ref"
    fi

    # Move the generated files into the work tree and commit them.
    mv "$BUILD_DIR"/* "$BUILD_DIR"/.* "$TMP_DIR" 2>/dev/null
    git config --local user.name "$(git log -1 --pretty=format:"%an" "$ref")"
    git config --local user.email "$(git log -1 --pretty=format:"%ae" "$ref")"
    git add --all
    git commit -m "$(git log -1 --pretty=format:"%s" "$ref")"

    # Add an RSS feed of the latest changes, too.
    gitfeedScript > "gitfeed-$$.rb"
    "$RUBY_CMD" "./gitfeed-$$.rb" > latest_changes.rss
    rm -f "gitfeed-$$.rb"
    git add latest_changes.rss
    git commit --amend -m "$commit_msg"

    git push origin markdown-"$the_ref"

    # Clean up.
    cd -
    GIT_DIR="$OLD_GIT_DIR"
    rm -rf "$BUILD_DIR" "$TMP_DIR"
}

# Zhu Li, do the thing!
while read oldrev newrev ref; do
    main "$oldrev" "$newrev" "$ref"
done
